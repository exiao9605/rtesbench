{%- import selected_sub_template as RTOS -%}
//头文件
{{-RTOS.header()-}}

//define预定义
#define active_core {{active_core}} 
{{-RTOS.define()-}}


//定义函数
{{-RTOS.funcdefine()-}}

// 定义全局semaphore及其他
{{RTOS.semaphoreDeclaration()}}
{{-RTOS.variables()-}}
int histogram[1001] = {0};
int Stress_Frequency=0;
{{RTOS.timer_define() }}

// Target 函数
{{RTOS.target_func1_head()}}{

    //target task starts
    {{RTOS.print("Target task starts\n")}}  
    long start_time;
    long begin_time;
    long end_time;
    long duration;
    long execution_time;
    int core_id=0;
    {{RTOS.varifyAffinity()}}
    {{RTOS.Target1Variables()}}
    {{RTOS.intialize_timer()}}   
   
    //main loop
    while(Stress_Frequency<=100){
        {{RTOS.print("Evaluation- %d starts\n",["Stress_Frequency"])}}  
    	{{RTOS.timer_gettime1()}}
        start_time={{RTOS.timer_gettime()}};
    	while(1){

    		//measure the execution time of target
    		{{RTOS.timer_gettime1()}}
            begin_time={{RTOS.timer_gettime()}};
    		{{RTOS.SemaphoreAccessAPI("sem1")}}       
            {{RTOS.timer_gettime1()}}
            end_time={{RTOS.timer_gettime()}};

            //duration calculation & write in histogram
            duration={{RTOS.duration_calculation()}};  
            if(duration/10<1000){
                  histogram[duration/10]++;
            }
            else histogram[1000]++;
            execution_time={{RTOS.cnt_to_sec()}}; 
            //loop judge: print histogram and to next loop
            if(execution_time>={{execution_loop}}){
            	long sum=0;
            	int cnt=0;
                {{RTOS.print("print histogram for Frequency %d\n",["Stress_Frequency"])}}  
            	for(int i=0;i<1000;++i){
            		if(histogram[i]!=0){
            			cnt+=histogram[i];
            			sum+=histogram[i]*i;
                        {{RTOS.print("%d : %d\n",["i","histogram[i]"])}}
            		}
            	}
                {{RTOS.print(">1000 : %d\n",["histogram[1000]"])}}
            	if(cnt!=0){
                    {{RTOS.print("average execution time: %d\n",["sum/cnt"])}}
            	}
            	for(int i=0;i<=1000;++i){
            		histogram[i]=0;
            	}
            	break;
            }
    	}
    	Stress_Frequency+={{execution_step}};
    } 
    {{RTOS.print("All evaluation endded, start after process")}}  

    //after process of RTOS
	{{RTOS.target_func_after_process()}}
}

// Stress 函数
{{RTOS.stress_func_head()}}{

	int core_id={{RTOS.get_core_id()}};
	{{RTOS.varifyAffinity(core_id)}}
    {{RTOS.StressVariables()}}
	int rand;
	int seed={{RTOS.seed()}};

	//stress task starts
    {{RTOS.print("StressTask-%d starts\n",["core_id"])}}
	while(Stress_Frequency<=100){
		rand= rand_r(&seed)%101;
		if(rand<=Stress_Frequency){
			{{RTOS.SemaphoreAccessAPI("sem1")}}
		}
		else{
			{{RTOS.SemaphoreAccessAPI("sem2")}}
		}
	}
    {{RTOS.print("stress on core%d endded \n",["core_id"])}}
	//after process of RTOS
	{{RTOS.stress_func_after_process()}}
}

void stress_void(){
    
}


//Main 函数
{{RTOS.main_head()}}{
    
    {{RTOS.main_variables()}}
    {{RTOS.initialSemaphore("sem1","sem2","1","0")}}
    {{RTOS.SinglecreateTaskandSetAffinity()}}
    {{RTOS.main_func_after_process()}}

}



