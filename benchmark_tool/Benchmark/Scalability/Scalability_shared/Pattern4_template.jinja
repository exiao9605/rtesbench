{%- import selected_sub_template as RTOS -%}
//头文件
{{-RTOS.header()-}}

//define预定义
{{-RTOS.define()-}}
#define active_core {{active_core}} 

//定义函数
{{-RTOS.funcdefine()-}}

// 定义全局semaphore及其他
{{RTOS.dtqDeclaration()}} dtq1;
{{RTOS.dtqDeclaration()}} dtq2;
{{RTOS.dtqDeclaration()}} dtqS;
{{-RTOS.variables()-}}
int histgram[1001] = {0};
int Stress_Frequency=0;

// Target 函数
{{RTOS.Paralleled_func1_head()}}{

    //target task starts 
    int core_id={{RTOS.get_core_id()}};    
    int cnt=0; 
    long start_time=0;
    long end_time=0;
    long execution=0;
    {{RTOS.ParaVariables()}}
    {{RTOS.varifyAffinity()}}
    {{RTOS.print("Paralleltask-%d starts\n",["core_id"])}} 
    {{RTOS.timer_gettime1()}}
    start_time = {{RTOS.timer_gettime()}};
    
    //main loop
    while(execution<{{execution_loop}}){
        
         {{RTOS.dtqSendAPI("dtqS")}}
         {{RTOS.dtqReceiveAPI("dtqS")}}
         cnt++;
         {{RTOS.timer_gettime1()}}
         end_time={{RTOS.timer_gettime()}};
         execution={{RTOS.cnt_to_sec()}};
    } 

    {{RTOS.print("Core%d : %d\n",["core_id","cnt"])}}
    {{RTOS.print("All evaluation endded, start after process")}} 
  
    //after process of RTOS
    {{RTOS.target_func_after_process()}}
}



//Main 函数
{{RTOS.main_head()}}{
    
    {{RTOS.main_variables()}}
    {{RTOS.initialDTQ("dtqS","dtq2","1")}}
    {{RTOS.ParalleledTaskandSetAffinity()}}
    {{RTOS.main_func_after_process()}}

}

